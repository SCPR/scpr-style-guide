// Grids: Classes for creating layouts.
// Size modifiers are used to determine how big the contents of a row
// are at different container sizes.
//
// .l-row                               - Creates a responsive row using flexbox
//
// .l-row--(sm|med|lg|xl)-*             - Container size-specific classes.
// .l-row--*-reverse                    - Reverses the display direction of child columns.
// .l-row--*-nowrap                     - Resizes child columns proportionally instead of clearing them to the next line.
// .l-row--*-wrap-reverse               - Reverses the display direction of child columns that are wrapped.
// .l-row--*-start                      - Justifies columns to the beginning of the row.
// .l-row--*-end                        - Justifies columns to the end of the row.
// .l-row--*-center                     - Centers child columns.
// .l-row--*-top                        - Justifies columns to the top of the row.
// .l-row--*-bottom                     - Justifies columns to the bottom of the row.
// .l-row--*-middle                     - Vertically centers columns.
// .l-row--*-around                     - Puts space around each column.
// .l-row--*-between                    - Put space between each column.
// .l-row--*-noflex                     - Make the row `display: block`, disabling flexbox features.
// .l-row--*-nogutter                   - Disables gutters.
// .l-row--*-vertical                   - Displays columns vertically and wraps vertically.
//
// .l-col                               - Creates a row column that "flexes" with a row.
// .l-col--(sm|med|lg|xl)-(1-12)        - Container size-specific classes, determining how large the column should be.
// .l-col--(sm|med|lg|xl)-offset-(1-12) - Creates a column-sized offset, or margin, for the column.
// .l-col--*-first                      - Reorders the display of the columns to appear first in the row.
// .l-col--*-last                       - Reorders the display of the columns to appear last in the row.
//
// Styleguide 0.3.0


// Rows
.l-row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-around;
  margin-left: ($gutter / 4);
  margin-right: ($gutter / 4);

  @each $breakpoint, $breakpoint-size in $grid-breakpoints {
    @include media-min($breakpoint-size) {
      &--#{$breakpoint}-start {
        justify-content: flex-start;
        text-align: start;
      }

      &--#{$breakpoint}-center {
        justify-content: center;
        text-align: center;
      }

      &--#{$breakpoint}-end {
        justify-content: flex-end;
        text-align: end;
      }

      &--#{$breakpoint}-top {
        align-items: flex-start;
      }

      &--#{$breakpoint}-middle {
        align-items: center;
      }

      &--#{$breakpoint}-bottom {
        align-items: flex-end;
      }

      &--#{$breakpoint}-around {
        justify-content: space-around;
      }

      &--#{$breakpoint}-between {
        justify-content: space-between;
      }

      &--#{$breakpoint}-vertical {
        flex-direction: column;
        flex-wrap: wrap;
      }

      &--#{$breakpoint}-noflex {
        display: block;
      }

      &--#{$breakpoint}-nogutter {
        justify-content: initial;
      }

      &--#{$breakpoint}-reverse {
        flex-direction: row-reverse;
      }

      &--#{$breakpoint}-nowrap {
        flex-wrap: nowrap;
      }

      &--#{$breakpoint}-wrap-reverse {
        flex-wrap: wrap-reverse;
      }

    }
  }
}

// Columns
.l-col {
  @each $breakpoint, $breakpoint-size in $grid-breakpoints {
    @include media-min($breakpoint-size) {
      $col-selectors: "#{&}--#{$breakpoint}";

      @for $col-num from 1 through $grid-columns {
        $col-selector: unquote("#{&}--#{$breakpoint}-#{$col-num}");
        $col-selectors: append($col-selectors, $col-selector, comma);
        $col-offset-selector: unquote("#{&}--#{$breakpoint}-offset-#{$col-num}");
        $col-selectors: append($col-selectors, $col-offset-selector, comma);
      }

      #{$col-selectors} {
        box-sizing: border-box;
        flex: 0 0 auto;
      }

      &--#{$breakpoint} {

        @for $col-num from 1 through $grid-columns {
          $column-width: ($col-num / $grid-columns * 100%) - ($gutter / 2);

          &-#{$col-num} {
            width: $column-width;
          }

          &-offset-#{$col-num} {
            margin-left: $column-width;
          }
        }
      }
    }


    &--#{$breakpoint}-first {
      order: -1;
    }

    &--#{$breakpoint}-last {
      order: 1;
    }
  }
}
